{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NeutronMsg",
  "description": "A number of Custom messages that can call into the Neutron bindings.",
  "oneOf": [
    {
      "description": "RegisterInterchainAccount registers an interchain account on remote chain.",
      "type": "object",
      "required": [
        "register_interchain_account"
      ],
      "properties": {
        "register_interchain_account": {
          "type": "object",
          "required": [
            "connection_id",
            "interchain_account_id"
          ],
          "properties": {
            "connection_id": {
              "description": "*connection_id** is an IBC connection identifier between Neutron and remote chain.",
              "type": "string"
            },
            "interchain_account_id": {
              "description": "**interchain_account_id** is an identifier of your new interchain account. Can be any string. This identifier allows contracts to have multiple interchain accounts on remote chains.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SubmitTx starts the process of executing any Cosmos-SDK *msgs* on remote chain.",
      "type": "object",
      "required": [
        "submit_tx"
      ],
      "properties": {
        "submit_tx": {
          "type": "object",
          "required": [
            "connection_id",
            "fee",
            "interchain_account_id",
            "memo",
            "msgs",
            "timeout"
          ],
          "properties": {
            "connection_id": {
              "description": "*connection_id** is an IBC connection identifier between Neutron and remote chain.",
              "type": "string"
            },
            "fee": {
              "description": "**fee** is an ibc fee for the transaction.",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcFee"
                }
              ]
            },
            "interchain_account_id": {
              "description": "*interchain_account_id** is an identifier of your interchain account from which you want to execute msgs.",
              "type": "string"
            },
            "memo": {
              "description": "*memo** is a memo you want to attach to your interchain transaction.It behaves like a memo in usual Cosmos transaction.",
              "type": "string"
            },
            "msgs": {
              "description": "*msgs** is a list of protobuf encoded Cosmos-SDK messages you want to execute on remote chain.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProtobufAny"
              }
            },
            "timeout": {
              "description": "*timeout** is a timeout in seconds after which the packet times out.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "RegisterInterchainQuery registers an interchain query.",
      "type": "object",
      "required": [
        "register_interchain_query"
      ],
      "properties": {
        "register_interchain_query": {
          "type": "object",
          "required": [
            "connection_id",
            "keys",
            "query_type",
            "transactions_filter",
            "update_period"
          ],
          "properties": {
            "connection_id": {
              "description": "*connection_id** is an IBC connection identifier between Neutron and remote chain.",
              "type": "string"
            },
            "keys": {
              "description": "*keys** is the KV-storage keys for which we want to get values from remote chain.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/KVKey"
              }
            },
            "query_type": {
              "description": "*query_type** is a query type identifier ('tx' or 'kv' for now).",
              "type": "string"
            },
            "transactions_filter": {
              "description": "*transactions_filter** is the filter for transaction search ICQ.",
              "type": "string"
            },
            "update_period": {
              "description": "*update_period** is used to say how often the query must be updated.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "RegisterInterchainQuery updates an interchain query.",
      "type": "object",
      "required": [
        "update_interchain_query"
      ],
      "properties": {
        "update_interchain_query": {
          "type": "object",
          "required": [
            "query_id"
          ],
          "properties": {
            "new_keys": {
              "description": "*new_keys** is the new query keys to retrive.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/KVKey"
              }
            },
            "new_transactions_filter": {
              "description": "*new_transactions_filter** is a new transactions filter of the query.",
              "type": [
                "string",
                "null"
              ]
            },
            "new_update_period": {
              "description": "*new_update_period** is a new update period of the query.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "query_id": {
              "description": "*query_id** is the ID of the query we want to update.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "RemoveInterchainQuery removes as interchain query.",
      "type": "object",
      "required": [
        "remove_interchain_query"
      ],
      "properties": {
        "remove_interchain_query": {
          "type": "object",
          "required": [
            "query_id"
          ],
          "properties": {
            "query_id": {
              "description": "*query_id** is ID of the query we want to remove.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcTransfer sends a fungible token packet over IBC.",
      "type": "object",
      "required": [
        "ibc_transfer"
      ],
      "properties": {
        "ibc_transfer": {
          "type": "object",
          "required": [
            "fee",
            "memo",
            "receiver",
            "sender",
            "source_channel",
            "source_port",
            "timeout_height",
            "timeout_timestamp",
            "token"
          ],
          "properties": {
            "fee": {
              "$ref": "#/definitions/IbcFee"
            },
            "memo": {
              "type": "string"
            },
            "receiver": {
              "type": "string"
            },
            "sender": {
              "type": "string"
            },
            "source_channel": {
              "type": "string"
            },
            "source_port": {
              "type": "string"
            },
            "timeout_height": {
              "$ref": "#/definitions/RequestPacketTimeoutHeight"
            },
            "timeout_timestamp": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "token": {
              "$ref": "#/definitions/Coin"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SubmitAdminProposal sends a proposal to neutron's Admin module. This type of messages can be only executed by Neutron DAO.",
      "type": "object",
      "required": [
        "submit_admin_proposal"
      ],
      "properties": {
        "submit_admin_proposal": {
          "type": "object",
          "required": [
            "admin_proposal"
          ],
          "properties": {
            "admin_proposal": {
              "$ref": "#/definitions/AdminProposal"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory message. Contracts can create denoms, namespaced under the contract's address. A contract may create any number of independent sub-denoms.",
      "type": "object",
      "required": [
        "create_denom"
      ],
      "properties": {
        "create_denom": {
          "type": "object",
          "required": [
            "subdenom"
          ],
          "properties": {
            "subdenom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory message. Contracts can change the admin of a denom that they are the admin of.",
      "type": "object",
      "required": [
        "change_admin"
      ],
      "properties": {
        "change_admin": {
          "type": "object",
          "required": [
            "denom",
            "new_admin_address"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "new_admin_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory message. Contracts can mint native tokens for an existing factory denom that they are the admin of.",
      "type": "object",
      "required": [
        "mint_tokens"
      ],
      "properties": {
        "mint_tokens": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "mint_to_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            },
            "mint_to_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory message. Contracts can burn native tokens for an existing factory denom that they are the admin of. Currently, the burn from address must be the admin contract.",
      "type": "object",
      "required": [
        "burn_tokens"
      ],
      "properties": {
        "burn_tokens": {
          "type": "object",
          "required": [
            "amount",
            "burn_from_address",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "burn_from_address": {
              "description": "Must be set to `\"\"` for now",
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "AddSchedule adds new schedule with a given `name`. Until schedule is removed it will execute all `msgs` every `period` blocks. First execution is at least on `current_block + period` block. [Permissioned - DAO Only]",
      "type": "object",
      "required": [
        "add_schedule"
      ],
      "properties": {
        "add_schedule": {
          "type": "object",
          "required": [
            "msgs",
            "name",
            "period"
          ],
          "properties": {
            "msgs": {
              "description": "list of cosmwasm messages to be executed",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MsgExecuteContract"
              }
            },
            "name": {
              "description": "Name of a new schedule. Needed to be able to `RemoveSchedule` and to log information about it",
              "type": "string"
            },
            "period": {
              "description": "period in blocks with which `msgs` will be executed",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "RemoveSchedule removes the schedule with a given `name`. [Permissioned - DAO or Security DAO only]",
      "type": "object",
      "required": [
        "remove_schedule"
      ],
      "properties": {
        "remove_schedule": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AdminProposal": {
      "description": "AdminProposal defines the struct for various proposals which Neutron's Admin Module may accept.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "param_change_proposal"
          ],
          "properties": {
            "param_change_proposal": {
              "$ref": "#/definitions/ParamChangeProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "software_upgrade_proposal"
          ],
          "properties": {
            "software_upgrade_proposal": {
              "$ref": "#/definitions/SoftwareUpgradeProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cancel_software_upgrade_proposal"
          ],
          "properties": {
            "cancel_software_upgrade_proposal": {
              "$ref": "#/definitions/CancelSoftwareUpgradeProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "upgrade_proposal"
          ],
          "properties": {
            "upgrade_proposal": {
              "$ref": "#/definitions/UpgradeProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "client_update_proposal"
          ],
          "properties": {
            "client_update_proposal": {
              "$ref": "#/definitions/ClientUpdateProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pin_codes_proposal"
          ],
          "properties": {
            "pin_codes_proposal": {
              "$ref": "#/definitions/PinCodesProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "unpin_codes_proposal"
          ],
          "properties": {
            "unpin_codes_proposal": {
              "$ref": "#/definitions/UnpinCodesProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "sudo_contract_proposal"
          ],
          "properties": {
            "sudo_contract_proposal": {
              "$ref": "#/definitions/SudoContractProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_admin_proposal"
          ],
          "properties": {
            "update_admin_proposal": {
              "$ref": "#/definitions/UpdateAdminProposal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "clear_admin_proposal"
          ],
          "properties": {
            "clear_admin_proposal": {
              "$ref": "#/definitions/ClearAdminProposal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CancelSoftwareUpgradeProposal": {
      "description": "CancelSoftwareUpgradeProposal defines the struct for cancel software upgrade proposal.",
      "type": "object",
      "required": [
        "description",
        "title"
      ],
      "properties": {
        "description": {
          "description": "*description** is a text description of proposal. Non unique.",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal. Non unique.",
          "type": "string"
        }
      }
    },
    "ClearAdminProposal": {
      "description": "SudoContractProposal defines the struct for clear admin proposal.",
      "type": "object",
      "required": [
        "contract",
        "description",
        "title"
      ],
      "properties": {
        "contract": {
          "description": "*contract** is an address of contract admin will be removed.",
          "type": "string"
        },
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "ClientUpdateProposal": {
      "description": "ClientUpdateProposal defines the struct for client update proposal.",
      "type": "object",
      "required": [
        "description",
        "subject_client_id",
        "substitute_client_id",
        "title"
      ],
      "properties": {
        "description": {
          "description": "*description** is a text description of proposal. Non unique.",
          "type": "string"
        },
        "subject_client_id": {
          "description": "*subject_client_id** is a subject client id.",
          "type": "string"
        },
        "substitute_client_id": {
          "description": "*substitute_client_id** is a substitute client id.",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "IbcFee": {
      "description": "IbcFee defines struct for fees that refund the relayer for `SudoMsg` messages submission. Unused fee kind will be returned back to message sender. Please refer to these links for more information: IBC transaction structure - <https://docs.neutron.org/neutron/interchain-txs/messages/#msgsubmittx> General mechanics of fee payments - <https://docs.neutron.org/neutron/feerefunder/overview/#general-mechanics>",
      "type": "object",
      "required": [
        "ack_fee",
        "recv_fee",
        "timeout_fee"
      ],
      "properties": {
        "ack_fee": {
          "description": "*ack_fee** is an amount of coins to refund relayer for submitting ack message for a particular IBC packet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "recv_fee": {
          "description": "**recv_fee** currently is used for compatibility with ICS-29 interface only and must be set to zero (i.e. 0untrn), because Neutron's fee module can't refund relayer for submission of Recv IBC packets due to compatibility with target chains.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "timeout_fee": {
          "description": "*timeout_fee** amount of coins to refund relayer for submitting timeout message for a particular IBC packet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "KVKey": {
      "description": "Describes a KV key for which you want to get value from the storage on remote chain",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "*key** is a key you want to read from the storage",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "path": {
          "description": "*path** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
          "type": "string"
        }
      }
    },
    "MsgExecuteContract": {
      "description": "MsgExecuteContract defines a call to the contract execution",
      "type": "object",
      "required": [
        "contract",
        "msg"
      ],
      "properties": {
        "contract": {
          "description": "*contract** is a contract address that will be called",
          "type": "string"
        },
        "msg": {
          "description": "*msg** is a contract call message",
          "type": "string"
        }
      }
    },
    "ParamChange": {
      "description": "ParamChange defines the struct for parameter change request.",
      "type": "object",
      "required": [
        "key",
        "subspace",
        "value"
      ],
      "properties": {
        "key": {
          "description": "*key** is a name of parameter. Unique for subspace.",
          "type": "string"
        },
        "subspace": {
          "description": "*subspace** is a key of module to which the parameter to change belongs. Unique for each module.",
          "type": "string"
        },
        "value": {
          "description": "*value** is a new value for given parameter. Non unique.",
          "type": "string"
        }
      }
    },
    "ParamChangeProposal": {
      "description": "ParamChangeProposal defines the struct for single parameter change proposal.",
      "type": "object",
      "required": [
        "description",
        "param_changes",
        "title"
      ],
      "properties": {
        "description": {
          "description": "*description** is a text description of proposal. Non unique.",
          "type": "string"
        },
        "param_changes": {
          "description": "*param_changes** is a vector of params to be changed. Non unique.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParamChange"
          }
        },
        "title": {
          "description": "*title** is a text title of proposal. Non unique.",
          "type": "string"
        }
      }
    },
    "PinCodesProposal": {
      "description": "PinCodesProposal defines the struct for pin contract codes proposal.",
      "type": "object",
      "required": [
        "code_ids",
        "description",
        "title"
      ],
      "properties": {
        "code_ids": {
          "description": "*code_ids** is an array of codes to be pined.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "Plan": {
      "description": "Plan defines the struct for planned upgrade.",
      "type": "object",
      "required": [
        "height",
        "info",
        "name"
      ],
      "properties": {
        "height": {
          "description": "*height** is a height at which the upgrade must be performed",
          "type": "integer",
          "format": "int64"
        },
        "info": {
          "description": "*info** is any application specific upgrade info to be included on-chain",
          "type": "string"
        },
        "name": {
          "description": "*name** is a name for the upgrade",
          "type": "string"
        }
      }
    },
    "ProtobufAny": {
      "description": "Type for wrapping any protobuf message",
      "type": "object",
      "required": [
        "type_url",
        "value"
      ],
      "properties": {
        "type_url": {
          "description": "*type_url** describes the type of the serialized message",
          "type": "string"
        },
        "value": {
          "description": "*value** must be a valid serialized protocol buffer of the above specified type",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "RequestPacketTimeoutHeight": {
      "type": "object",
      "properties": {
        "revision_height": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "revision_number": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "SoftwareUpgradeProposal": {
      "description": "SoftwareUpgradeProposal defines the struct for software upgrade proposal.",
      "type": "object",
      "required": [
        "description",
        "plan",
        "title"
      ],
      "properties": {
        "description": {
          "description": "*description** is a text description of proposal. Non unique.",
          "type": "string"
        },
        "plan": {
          "description": "*plan** is a plan of upgrade.",
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        },
        "title": {
          "description": "*title** is a text title of proposal. Non unique.",
          "type": "string"
        }
      }
    },
    "SudoContractProposal": {
      "description": "SudoContractProposal defines the struct for sudo execution proposal.",
      "type": "object",
      "required": [
        "contract",
        "description",
        "msg",
        "title"
      ],
      "properties": {
        "contract": {
          "description": "*contract** is an address of contract to be executed.",
          "type": "string"
        },
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "msg": {
          "description": "**msg*** is a sudo message.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UnpinCodesProposal": {
      "description": "UnpinCodesProposal defines the struct for unpin contract codes proposal.",
      "type": "object",
      "required": [
        "code_ids",
        "description",
        "title"
      ],
      "properties": {
        "code_ids": {
          "description": "*code_ids** is an array of codes to be unpined.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "UpdateAdminProposal": {
      "description": "UpdateAdminProposal defines the struct for  update admin proposal.",
      "type": "object",
      "required": [
        "contract",
        "description",
        "new_admin",
        "title"
      ],
      "properties": {
        "contract": {
          "description": "*contract** is an address of contract to update admin.",
          "type": "string"
        },
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "new_admin": {
          "description": "**new_admin*** is an address of new admin",
          "type": "string"
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        }
      }
    },
    "UpgradeProposal": {
      "description": "UpgradeProposal defines the struct for  upgrade proposal.",
      "type": "object",
      "required": [
        "description",
        "plan",
        "title",
        "upgraded_client_state"
      ],
      "properties": {
        "description": {
          "description": "*description** is a text description of proposal.",
          "type": "string"
        },
        "plan": {
          "description": "*plan** is a plan of upgrade.",
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        },
        "title": {
          "description": "*title** is a text title of proposal.",
          "type": "string"
        },
        "upgraded_client_state": {
          "description": "*upgraded_client_state** is an upgraded client state.",
          "allOf": [
            {
              "$ref": "#/definitions/ProtobufAny"
            }
          ]
        }
      }
    }
  }
}
