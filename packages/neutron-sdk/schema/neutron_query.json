{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NeutronQuery",
  "description": "The queries to interact with neutron specific blockchain modules.",
  "oneOf": [
    {
      "description": "Query a result of registered interchain query on remote chain",
      "type": "object",
      "required": [
        "interchain_query_result"
      ],
      "properties": {
        "interchain_query_result": {
          "type": "object",
          "required": [
            "query_id"
          ],
          "properties": {
            "query_id": {
              "description": "*query_id** is an ID registered interchain query",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query a registered interchain account address for a specific connection_id Every contract may have as many interchain accounts as necessary.",
      "type": "object",
      "required": [
        "interchain_account_address"
      ],
      "properties": {
        "interchain_account_address": {
          "type": "object",
          "required": [
            "connection_id",
            "interchain_account_id",
            "owner_address"
          ],
          "properties": {
            "connection_id": {
              "description": "*connection_id** is an IBC connection identifier between Neutron and remote chain",
              "type": "string"
            },
            "interchain_account_id": {
              "description": "**interchain_account_id** is an identifier of your interchain account. Can be any string This identifier allows contracts to have multiple interchain accounts on remote chains",
              "type": "string"
            },
            "owner_address": {
              "description": "*owner_address** is an address of contract which registered interchain account",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query all registered interchain queries on all remote chains",
      "type": "object",
      "required": [
        "registered_interchain_queries"
      ],
      "properties": {
        "registered_interchain_queries": {
          "type": "object",
          "required": [
            "connection_id",
            "owners",
            "pagination"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "owners": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "$ref": "#/definitions/PageRequest"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query registered interchain query with a specific query_id",
      "type": "object",
      "required": [
        "registered_interchain_query"
      ],
      "properties": {
        "registered_interchain_query": {
          "type": "object",
          "required": [
            "query_id"
          ],
          "properties": {
            "query_id": {
              "description": "*query_id** is an ID registered interchain query",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query total amount of burned neutron fees",
      "type": "object",
      "required": [
        "total_burned_neutrons_amount"
      ],
      "properties": {
        "total_burned_neutrons_amount": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query minimum IBC fee",
      "type": "object",
      "required": [
        "min_ibc_fee"
      ],
      "properties": {
        "min_ibc_fee": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory query. Given a subdenom minted by a contract via [`NeutronMsg::MintTokens`](crate::bindings::msg::NeutronMsg::MintTokens), returns the full denom as used by [`BankMsg::Send`](cosmwasm_std::BankMsg::Send).",
      "type": "object",
      "required": [
        "full_denom"
      ],
      "properties": {
        "full_denom": {
          "type": "object",
          "required": [
            "creator_addr",
            "subdenom"
          ],
          "properties": {
            "creator_addr": {
              "type": "string"
            },
            "subdenom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "TokenFactory query. Returns the admin of a denom, if the denom is a TokenFactory denom.",
      "type": "object",
      "required": [
        "denom_admin"
      ],
      "properties": {
        "denom_admin": {
          "type": "object",
          "required": [
            "subdenom"
          ],
          "properties": {
            "subdenom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "PageRequest": {
      "type": "object",
      "required": [
        "count_total",
        "key",
        "limit",
        "offset",
        "reverse"
      ],
      "properties": {
        "count_total": {
          "description": "**count_total** is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
          "type": "boolean"
        },
        "key": {
          "description": "**key** is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "limit": {
          "description": "**limit** is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "offset": {
          "description": "**offset** is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reverse": {
          "description": "reverse is set to true if results are to be returned in the descending order.",
          "type": "boolean"
        }
      }
    }
  }
}
