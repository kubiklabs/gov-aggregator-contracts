{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "allow_revoting",
    "close_proposal_on_execution_failure",
    "max_voting_period",
    "only_members_execute",
    "pre_propose_info",
    "voting_strategy"
  ],
  "properties": {
    "allow_revoting": {
      "description": "Allows changing votes before the proposal expires. If this is enabled proposals will not be able to complete early as final vote information is not known until the time of proposal expiration.",
      "type": "boolean"
    },
    "close_proposal_on_execution_failure": {
      "description": "If set to true proposals will be closed if their execution fails. Otherwise, proposals will remain open after execution failure. For example, with this enabled a proposal to send 5 tokens out of a DAO's reserve with 4 tokens would be closed when it is executed. With this disabled, that same proposal would remain open until the DAO's reserve was large enough for it to be executed.",
      "type": "boolean"
    },
    "max_voting_period": {
      "description": "The amount of time a proposal can be voted on before expiring",
      "allOf": [
        {
          "$ref": "#/definitions/Duration"
        }
      ]
    },
    "min_voting_period": {
      "description": "The minimum amount of time a proposal must be open before passing. A proposal may fail before this amount of time has elapsed, but it will not pass. This can be useful for preventing governance attacks wherein an attacker aquires a large number of tokens and forces a proposal through.",
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    },
    "only_members_execute": {
      "description": "If set to true only members may execute passed proposals. Otherwise, any address may execute a passed proposal.",
      "type": "boolean"
    },
    "pre_propose_info": {
      "description": "Information about what addresses may create proposals.",
      "allOf": [
        {
          "$ref": "#/definitions/PreProposeInfo"
        }
      ]
    },
    "voting_strategy": {
      "description": "Voting params configuration",
      "allOf": [
        {
          "$ref": "#/definitions/VotingStrategy"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Admin": {
      "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
      "oneOf": [
        {
          "description": "Set the admin to a specified address.",
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets the admin as the core module address.",
          "type": "object",
          "required": [
            "core_module"
          ],
          "properties": {
            "core_module": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ModuleInstantiateInfo": {
      "description": "Information needed to instantiate a module.",
      "type": "object",
      "required": [
        "code_id",
        "label",
        "msg"
      ],
      "properties": {
        "admin": {
          "description": "CosmWasm level admin of the instantiated contract. See: <https://docs.cosmwasm.com/docs/1.0/smart-contracts/migration>",
          "anyOf": [
            {
              "$ref": "#/definitions/Admin"
            },
            {
              "type": "null"
            }
          ]
        },
        "code_id": {
          "description": "Code ID of the contract to be instantiated.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "label": {
          "description": "Label for the instantiated contract.",
          "type": "string"
        },
        "msg": {
          "description": "Instantiate message to be used to create the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "PercentageThreshold": {
      "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `yes_votes >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
      "oneOf": [
        {
          "description": "The majority of voters must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PreProposeInfo": {
      "oneOf": [
        {
          "description": "Anyone may create a proposal free of charge.",
          "type": "object",
          "required": [
            "anyone_may_propose"
          ],
          "properties": {
            "anyone_may_propose": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The module specified in INFO has exclusive rights to proposal creation.",
          "type": "object",
          "required": [
            "module_may_propose"
          ],
          "properties": {
            "module_may_propose": {
              "type": "object",
              "required": [
                "info"
              ],
              "properties": {
                "info": {
                  "$ref": "#/definitions/ModuleInstantiateInfo"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "VotingStrategy": {
      "description": "Determines how many choices may be selected.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "single_choice"
          ],
          "properties": {
            "single_choice": {
              "type": "object",
              "required": [
                "quorum"
              ],
              "properties": {
                "quorum": {
                  "$ref": "#/definitions/PercentageThreshold"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
