{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProposalResponse",
  "description": "Information about a proposal returned by proposal queries.",
  "type": "object",
  "required": [
    "id",
    "proposal"
  ],
  "properties": {
    "id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal": {
      "$ref": "#/definitions/MultipleChoiceProposal"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CheckedMultipleChoiceOption": {
      "description": "A verified option that has all fields needed for voting.",
      "type": "object",
      "required": [
        "description",
        "index",
        "option_type",
        "vote_count"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "msgs": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/WasmMsg"
          }
        },
        "option_type": {
          "$ref": "#/definitions/MultipleChoiceOptionType"
        },
        "vote_count": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MultipleChoiceOptionType": {
      "description": "Represents the type of Multiple choice option. \"None of the above\" has a special type for example.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Standard"
          ]
        },
        {
          "description": "Choice that represents selecting none of the options; still counts toward quorum and allows proposals with all bad options to be voted against.",
          "type": "string",
          "enum": [
            "None"
          ]
        }
      ]
    },
    "MultipleChoiceProposal": {
      "type": "object",
      "required": [
        "allow_revoting",
        "choices",
        "description",
        "expiration",
        "proposer",
        "start_height",
        "status",
        "title",
        "total_power",
        "votes",
        "voting_strategy"
      ],
      "properties": {
        "allow_revoting": {
          "description": "Whether DAO members are allowed to change their votes. When disabled, proposals can be executed as soon as they pass. When enabled, proposals can only be executed after the voting period has ended and the proposal passed.",
          "type": "boolean"
        },
        "choices": {
          "description": "The options to be chosen from in the vote.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckedMultipleChoiceOption"
          }
        },
        "description": {
          "type": "string"
        },
        "expiration": {
          "description": "The the time at which this proposal will expire and close for additional votes.",
          "allOf": [
            {
              "$ref": "#/definitions/Expiration"
            }
          ]
        },
        "min_voting_period": {
          "description": "The minimum amount of time this proposal must remain open for voting. The proposal may not pass unless this is expired or None.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "proposer": {
          "description": "The address that created this proposal.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "start_height": {
          "description": "The block height at which this proposal was created. Voting power queries should query for voting power at this block height.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "status": {
          "description": "Proposal status (Open, rejected, executed, execution failed, closed, passed)",
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            }
          ]
        },
        "title": {
          "type": "string"
        },
        "total_power": {
          "description": "The total power when the proposal started (used to calculate percentages)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "votes": {
          "description": "The vote tally.",
          "allOf": [
            {
              "$ref": "#/definitions/MultipleChoiceVotes"
            }
          ]
        },
        "voting_strategy": {
          "description": "Voting settings (threshold, quorum, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/VotingStrategy"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MultipleChoiceVotes": {
      "type": "object",
      "required": [
        "vote_weights"
      ],
      "properties": {
        "vote_weights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        }
      }
    },
    "PercentageThreshold": {
      "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `yes_votes >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
      "oneOf": [
        {
          "description": "The majority of voters must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Status": {
      "oneOf": [
        {
          "description": "The proposal is open for voting.",
          "type": "string",
          "enum": [
            "open"
          ]
        },
        {
          "description": "The proposal has been rejected.",
          "type": "string",
          "enum": [
            "rejected"
          ]
        },
        {
          "description": "The proposal has been passed but has not been executed.",
          "type": "string",
          "enum": [
            "passed"
          ]
        },
        {
          "description": "The proposal has been passed and executed.",
          "type": "string",
          "enum": [
            "executed"
          ]
        },
        {
          "description": "The proposal has failed or expired and has been closed. A proposal deposit refund has been issued if applicable.",
          "type": "string",
          "enum": [
            "closed"
          ]
        },
        {
          "description": "The proposal's execution failed.",
          "type": "string",
          "enum": [
            "execution_failed"
          ]
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "VotingStrategy": {
      "description": "Determines how many choices may be selected.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "single_choice"
          ],
          "properties": {
            "single_choice": {
              "type": "object",
              "required": [
                "quorum"
              ],
              "properties": {
                "quorum": {
                  "$ref": "#/definitions/PercentageThreshold"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WasmMsg": {
      "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
      "oneOf": [
        {
          "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "funds",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "msg": {
                  "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "funds",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "label": {
                  "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg",
                "new_code_id"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "new_code_id": {
                  "description": "the code_id of the new logic to place in the given contract",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "admin",
                "contract_addr"
              ],
              "properties": {
                "admin": {
                  "type": "string"
                },
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "clear_admin"
          ],
          "properties": {
            "clear_admin": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
