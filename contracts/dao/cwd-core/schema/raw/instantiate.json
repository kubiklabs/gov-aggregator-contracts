{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "chain_list",
    "contract_registry",
    "description",
    "ica_helper_module_instantiate_info",
    "icq_helper_module_instantiate_info",
    "name",
    "proposal_modules_instantiate_info",
    "voting_registry_module_instantiate_info"
  ],
  "properties": {
    "chain_list": {
      "description": "Contains list of chain which this DAO will support and there respective values",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ChainStakeInfo"
      }
    },
    "contract_registry": {
      "$ref": "#/definitions/Addr"
    },
    "dao_uri": {
      "description": "Implements the DAO Star standard: https://daostar.one/EIP",
      "type": [
        "string",
        "null"
      ]
    },
    "description": {
      "description": "A description of the core contract.",
      "type": "string"
    },
    "ica_helper_module_instantiate_info": {
      "description": "Instantiate information for the ica helper contract",
      "allOf": [
        {
          "$ref": "#/definitions/ModuleInstantiateInfo"
        }
      ]
    },
    "icq_helper_module_instantiate_info": {
      "$ref": "#/definitions/ModuleInstantiateInfo"
    },
    "initial_items": {
      "description": "Initial information for arbitrary contract addresses to be added to the items map. The key is the name of the item in the items map. The value is an enum that either uses an existing address or instantiates a new contract.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/InitialItem"
      }
    },
    "name": {
      "description": "The name of the core contract.",
      "type": "string"
    },
    "proposal_modules_instantiate_info": {
      "description": "Instantiate information for the core contract's proposal modules.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModuleInstantiateInfo"
      }
    },
    "voting_registry_module_instantiate_info": {
      "description": "Instantiate information for the core contract's voting power module.",
      "allOf": [
        {
          "$ref": "#/definitions/ModuleInstantiateInfo"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Admin": {
      "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
      "oneOf": [
        {
          "description": "Set the admin to a specified address.",
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets the admin as the core module address.",
          "type": "object",
          "required": [
            "core_module"
          ],
          "properties": {
            "core_module": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ChainStakeInfo": {
      "description": "For receiving chain and their stake value.",
      "type": "object",
      "required": [
        "chain_id",
        "connection_id",
        "stake"
      ],
      "properties": {
        "chain_id": {
          "description": "chain-id of the chain which got registered in the DAO.",
          "type": "string"
        },
        "connection_id": {
          "description": "connection-id of the chain which got registered in the DAO.",
          "type": "string"
        },
        "stake": {
          "description": "stake is the value of chain-id which hold in the list of chain",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      }
    },
    "InitialItem": {
      "description": "Information about an item to be stored in the items list.",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "The name of the item.",
          "type": "string"
        },
        "value": {
          "description": "The value the item will have at instantiation time.",
          "type": "string"
        }
      }
    },
    "ModuleInstantiateInfo": {
      "description": "Information needed to instantiate a module.",
      "type": "object",
      "required": [
        "code_id",
        "label",
        "msg"
      ],
      "properties": {
        "admin": {
          "description": "CosmWasm level admin of the instantiated contract. See: <https://docs.cosmwasm.com/docs/1.0/smart-contracts/migration>",
          "anyOf": [
            {
              "$ref": "#/definitions/Admin"
            },
            {
              "type": "null"
            }
          ]
        },
        "code_id": {
          "description": "Code ID of the contract to be instantiated.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "label": {
          "description": "Label for the instantiated contract.",
          "type": "string"
        },
        "msg": {
          "description": "Instantiate message to be used to create the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    }
  }
}
